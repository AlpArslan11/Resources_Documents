{\rtf1\ansi\ansicpg1254\deff0\nouicompat\deflang1055{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset238 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang31 JAVA INTERVIEW SORULARI\par
\u8203?\par
S1: Java platformu neden ba\f1\u287?\u305?ms\u305?zd\u305?r?\par
C1: Herhangi bir sistemde \f0\lang1033\'e7al\f1\u305?\'baabilen bayt kodlar\u305?ndan dolay\u305?.\par
\u8203?\par
S2: Java neden %100 nesne y\f0\'f6nelimli de\f1\u287?il?\par
C2: \f0\'c7\'fcnk\'fc nesne olmayan 8 primitive data t\'fcr\'fcn\'fc kullan\f1\u305?r.\par
\u8203?\par
S3: public static void main (String [] args) Java\rquote da yer alan   bu yap\u305?y\u305? a\f0\'e7\f1\u305?klay\u305?n\u305?z.\par
C3: Bu, herhangi bir Java program\u305? i\f0\'e7in giri\f1\'ba noktas\u305?d\u305?r\par
public: bu y\f0\'f6nteme kimin eri\f1\'baebilece\u287?ini belirtmek i\f0\'e7in kullan\f1\u305?lan bir eri\'baim de\u287?i\'batiricidir ve bu y\f0\'f6ntemin herhangi bir s\f1\u305?n\u305?f taraf\u305?ndan eri\'bailebilir olaca\u287?\u305? anlam\u305?na gelir.\par
static: Java'da s\u305?n\u305?f tabanl\u305? oldu\u287?unu tan\u305?mlayan bir anahtar kelimedir. main (), bir s\u305?n\u305?f\u305?n olu\'baumunu olu\'baturmadan eri\'bailebilmesi i\f0\'e7in Java\rquote da static yap\f1\u305?l\u305?r.\par
void: methodun return type d\u305?r.\par
main (): JVM taraf\u305?ndan aranan methodun ad\u305?d\u305?r. JVM: Java sanal makinesi\par
String args ise main methoda iletilen parametredir.\par
\u8203?\par
S4: Wrapper Class\rquote lar nelerdir?\par
C4: Wrapper Class\rquote lar Java primitive datalar\u305?n\u305? o s\u305?n\u305?f\u305?n ba\'bavuru t\f0\'fcrlerine veya o\par
Class\rquote\f1\u305?n nesnelerine d\f0\'f6n\'fc\f1\'bat\f0\'fcr\'fcrler.\par
\u8203?\par
\u8203?\par
S5: Java da Constructor nedir?\par
C5: Bir nesneyi ba\f1\'balatmak i\f0\'e7in kullan\f1\u305?lan bir kod blo\u287?unu ifade eder. S\u305?n\u305?f\u305?n ad\u305?yla\par
ayn\u305? ada sahip olmal\u305?d\u305?r.\par
\u8203?\par
S6: Ka\f0\'e7 \'e7e\f1\'bait Constructor vard\u305?r? C6: 2 \f0\'e7e\f1\'bait Constructor vard\u305?r.\par
1) Default Constructor: herhangi bir girdi ya da de\u287?er almaz.\par
2) Parmeterized Constructor: durum de\u287?i\'bakenlerini sa\u287?lanan de\u287?erlerle ba\'balatabilir.\par
\u8203?\par
\u8203?\par
S7: Bir Class i nas\u305?l singleton yapabiliriz?\par
C7: O Class\rquote ta ki Constructor i private yaparak.\par
\u8203?\par
S8: Java da ArrayList ve Vector aras\u305?ndaki fark nedir?\par
C8: ArrayList h\u305?zl\u305? olmas\u305? i\f0\'e7in senkronize edilmemi\f1\'batir ancak Vector, i\'ba par\f0\'e7ac\f1\u305?\u287?\u305? a\f0\'e7\f1\u305?s\u305?ndan g\f0\'fcvenli oldu\f1\u287?undan yava\'ba olmas\u305? i\f0\'e7in senkronize edilmi\f1\'batir.\par
\u8203?\par
\u8203?\par
S9: Java da equals () ve = = i\'baareti aras\u305?ndaki fark nedir?\par
C9: equals () operat\f0\'f6r\'fc primitive datalar\f1\u305? ve Objectleri kar\'ba\u305?la\'bat\u305?rmak i\f0\'e7in kullan\f1\u305?l\u305?r. == ise iki tane Object i kar\'ba\u305?la\'bat\u305?rmak i\f0\'e7in kullan\f1\u305?l\u305?r.\par
\u8203?\par
\u8203?\par
s10: Java\rquote da Heap ve Stack Memory aras\u305?ndaki farklar nelerdir?\par
C10: Heap haf\u305?zas\u305? bir Application in t\f0\'fcm par\'e7alar\f1\u305? taraf\u305?ndan kullan\u305?l\u305?r. Objectler Heap i\f0\'e7inde depolan\f1\u305?r ve herkes\f0\'e7e genel kullan\f1\u305?ma m\f0\'fcsaittir. Stack haf\f1\u305?za ise sadece bir y\f0\'fcr\'fctme dizisi taraf\f1\u305?ndan kullan\u305?l\u305?r ve di\u287?erleri taraf\u305?ndan asla kullan\u305?lamaz.\par
\u8203?\par
\u8203?\par
S11: Java da package nedir?\par
C11: \u304?lgili Class\rquote lar\u305?n topland\u305?\u287?\u305? yerdir.\par
\u8203?\par
S12: Package\rquote lar\u305?n avantajlar\u305? nelerdir? \par
C12: \par
\u8203?\par
1. \u304?sim \f0\'e7at\f1\u305?\'bamas\u305?n\u305? \f0\'f6nler.\par
2. Kodlara kolay ula\f1\'ba\u305?m sa\u287?lar.\par
3. Gizli Class\rquote lar\u305? bar\u305?nd\u305?r\u305?r ki Class d\u305?\'ba\u305?ndan g\f0\'f6r\'fclemesin.\par
\u8203?\par
S13: Neden pointer lar Java da kullan\f1\u305?lmazlar?\par
C13: \f0\'c7\'fcnk\'fc g\'fcvenli de\f1\u287?illerdir ve program i\f0\'e7indeki karma\f1\'ba\u305?kl\u305?\u287?\u305? art\u305?r\u305?rlar.\par
\u8203?\par
S14: Java da JIT derleyici (compiler) nedir?\par
C14: JIT derleyici yani tam zamanl\u305? derleyici, Java bayt kodlar\u305?n\u305? talimatlara\par
d\f0\'f6n\'fc\f1\'bat\f0\'fcrmeye yard\f1\u305?mc\u305? olan bir programd\u305?r.\par
\u8203?\par
S15: Java da access modifier lar nelerdir? \par
C15: Default, Private, Public ve Protected.\par
\u8203?\par
S16: Java\rquote da ki access modifier lari a\f0\'e7\f1\u305?klay\u305?n\u305?z? \par
C16: Default: ayni package ve class tan ula\'ba\u305?labilir.\par
Public: t\f0\'fcm package lar ve class tan ula\f1\'ba\u305?labilir.\par
Private: sadece ayni class tan ula\'ba\u305?labilir.\par
Protected: sadece farkl\u305? pakette ama alt olmayan class tan ula\'ba\u305?lamaz. Di\u287?er \'baekillerde ula\'ba\u305?labilir.\par
\u8203?\par
(Uyar\u305?: Protected a dikkat edin l\f0\'fctfen yani ayni package ya da farkl\f1\u305? package olmas\u305? \f0\'f6nemli de\f1\u287?il sadece farkl\u305? package in alt class in da olmayan dosyadan eri\'baim sa\u287?lanam\u305?yor.)\par
*Tablo burada daha net anla\'ba\u305?labilir.\par
same => ayni;\par
different => farkl\u305?;\par
subclass - alt class => alt kumesi gibi; non-subclass => alt class i olmayan demek.\par
\u8203?\par
S17: Java da class i tarif ediniz?\par
C17: Class, datalar\u305?m\u305?z\u305? bar\u305?nd\u305?ran i\f0\'e7inde field variable\rquote lar\f1\u305? ve method\rquote lar\u305?n oldu\u287?u bizim \f0\'e7al\f1\u305?\'bama alan\u305?m\u305?zd\u305?r.\par
\u8203?\par
\u8203?\par
\u8203?\par
S18: Java da obje (Object) nedir ve nas\u305?l olu\'baturulur?\par
C18: Obje, \f0\'f6rnek de\f1\u287?i\'bakenlere sahip s\u305?n\u305?f\u305?n bir \f0\'f6rne\f1\u287?idir. Java'da new anahtar s\f0\'f6zc\'fc\f1\u287?\f0\'fc kullan\f1\u305?larak bir Obje olu\'baturulur.\par
\u8203?\par
\u8203?\par
\u8203?\par
S19: OOP nesne y\f0\'f6nelimli programlama nedir?\par
C19: Bu bir programlama modeli veya yakla\f1\'ba\u305?m\u305?, b\f0\'fcy\'fck ve karma\f1\'ba\u305?k kodlu programlar i\f0\'e7in idealdir ve aktif olarak g\'fcncellenmesi ve s\'fcrd\'fcr\'fclmesi gerekir. Programlar, mant\f1\u305?k ve i\'balevler yerine objeler etraf\u305?nda d\f0\'fczenlenmi\f1\'batir.\par
\u8203?\par
\u8203?\par
\u8203?\par
\u8203?\par
S20: Java da OOPs nin ana konsepti nelerdir?\par
C20: \u304?nheritance, Encapsulation, Abstraction, Polymorphism.\par
\u8203?\par
\u8203?\par
S21: Bunlar\u305? (OOPs nin ana konseptleri) a\f0\'e7\f1\u305?klay\u305?n\u305?z? \par
C21:\par
Inheritance kal\u305?t\u305?m-miras: Bir s\u305?n\u305?f\u305?n ba\'baka bir s\u305?n\u305?f\u305?n \f0\'f6zelliklerini elde etti\f1\u287?i miras ald\u305?\u287?\u305? bir s\f0\'fcre\'e7tir.\par
Encapsulation-kaps\'fclleme: Verileri sarmalama mekanizmas\f1\u305?d\u305?r. Abstraction-soyutlama: Kullan\u305?c\u305?dan var olan detaylar\u305? gizleme metodolojisidir. \par
Polymorphism: Bir de\u287?i\'bakenin birden \f0\'e7ok form alma yetene\f1\u287?idir.\par
\u8203?\par
S22: Local variables ile instance variables aras\u305?ndaki fark nedir?\par
C22: Local variables: tipik olarak bir method, constructor veya block i\f0\'e7inde kullan\f1\u305?l\u305?r ve yaln\u305?zca yerel kapsam\u305? vard\u305?r. Instance variables: objesinin kendisine ba\u287?l\u305? bir de\u287?i\'bakendir. Bir class i\f0\'e7inde ancak method d\f1\u305?\'ba\u305?nda bildirilirler.\par
\u8203?\par
S23: Java da Constructors ve Methods aras\u305?ndaki farklar nelerdir? \par
C23:\par
1. Constructors: Bir objenin durumunu ba\'balatmak i\f0\'e7in kullan\f1\u305?l\u305?r.\par
Methods: Bir objenin davran\u305?\'ba\u305?n\u305? temsil etmek i\f0\'e7in kullan\f1\u305?l\u305?r.\par
2. Constructors: Herhangi bir d\f0\'f6n\'fc\f1\'ba t\f0\'fcr\'fc (return type) yoktur.\par
Methods: Bir (return type) d\'f6n\'fc\f1\'ba t\f0\'fcr\'fcne sahip olmal\f1\u305?d\u305?r.\par
3. Constructors: (\f0\'d6rt\'fcl\'fc) \f1\u304?mplicitly olarak \f0\'e7a\f1\u287?r\u305?l\u305?r\par
Methods: (A\f0\'e7\f1\u305?k\f0\'e7a) Explicitly \'e7a\f1\u287?r\u305?lmas\u305? gerekiyor\par
4. Constructors: Class ad\u305?yla ayn\u305? isimde olmak zorundad\u305?r.\par
Methods: Olabilir veya olmayabilir de.\par
\u8203?\par
\u8203?\par
S24: Java\rquote da final keyword unu a\f0\'e7\f1\u305?klay\u305?n\u305?z?\par
C24: Final Java \f0\'f6zel bir keyword dur ve non-access modifier (eri\f1\'baim olmayan\par
de\u287?i\'batirici) olarak kullan\u305?l\u305?r.\par
\u8203?\par
S25: Final keyword un kullan\u305?m\u305?n\u305? a\f0\'e7\f1\u305?klay\u305?n\u305?z?\par
C25: Final keywordunu bir variable ile kulland\u305?\u287?\u305?m\u305?zda onun value yani de\u287?eri bir kez atand\u305?\u287?\u305? i\f0\'e7in de\f1\u287?i\'batirilemez.\par
Final Methodlar override edilemez. Final Class\rquote lar extends edilemez.\par
\u8203?\par
\u8203?\par
S26: Break ve Continue yap\u305?lar\u305? aras\u305?ndaki farklar nelerdir? C26:\par
1. Break Switch ve Loop\rquote larda kullan\u305?l\u305?r.\par
Continue sadece Loop\rquote larda kullan\u305?l\u305?r.\par
2. Break sistem \f0\'e7al\f1\u305?\'ba\u305?rken bulundu\u287?u i\'balemi sonland\u305?r\u305?r.\par
Continue i\'balemi sonland\u305?rmaz sadece s\u305?radaki di\u287?er se\f0\'e7ene\f1\u287?e atlar.\par
\u8203?\par
\u8203?\par
\u8203?\par
S27: Java\rquote da sonsuz d\f0\'f6ng\'fc (Loop) nedir?\par
C27: Java\rquote da bir i\f1\'balevsellik kar\'ba\u305?lanmad\u305?\u287?\u305?nda, bir talimat dizisi taraf\u305?ndan sonsuz d\f0\'f6ng\'fcye girilir.\par
\u8203?\par
\u8203?\par
S28: Java'da this() ve super() anahtar kelimeler aras\f1\u305?ndaki fark nedir?\par
C28: This() ayn\u305? class in varsay\u305?lan Constructor\rquote lar\u305?n\u305? \f0\'e7a\f1\u287?\u305?rmak i\f0\'e7in kullan\f1\u305?l\u305?r, ancak super() onlar\u305? ebeveyn / temel class tan \f0\'e7a\f1\u287?\u305?rmak i\f0\'e7in kullan\f1\u305?l\u305?r.\par
\u8203?\par
Not: this () ve super () (anahtar s\f0\'f6zc\'fckleri) keywords bir blo\f1\u287?un ilk sat\u305?r\u305?nda yer almal\u305?d\u305?rlar.\par
\u8203?\par
S29: Java da String Pool nedir?\par
C29: Heap haf\u305?za i\f0\'e7inde String\rquote lerin topland\f1\u305?\u287?\u305? havuz yani yerdir. Bir Object olu\'baturuldu\u287?u zaman onun bu havuzda \f0\'f6nceden olup olmad\f1\u305?\u287?\u305?n\u305? kontrol eder.\par
\u8203?\par
S30: Static method ve non-static methodlar aras\u305?ndaki farklar nelerdir? \par
C30:\par
1. Static method: Static anahtar s\f0\'f6zc\'fc\f1\u287?\f0\'fc method ad\f1\u305?ndan \f0\'f6nce kullan\f1\u305?lmal\u305?d\u305?r. Ancak non-static method anahtar kelimesini statik kullanmaya gerek yoktur.\par
2. Static method: Class kullan\u305?larak \f0\'e7a\f1\u287?r\u305?l\u305?r\par
Ancak non-static methodlar genel methodlar gibi \f0\'e7a\f1\u287?r\u305?labilir.\par
3. Static method: Statik olmayan de\u287?i\'bakenlere (variables) eri\'bailemez Ancak non-static method bunlara eri\'baebilir.\par
\u8203?\par
S31. String\rquote ler ve StringBuilder\rquote lar aras\u305?ndaki farklar? \par
Q31: 1. saklama alan\u305?; String\rquote ler StringPool'da\par
StringBuilder Heap haf\u305?zada 2. \u304?\'ba par\f0\'e7ac\f1\u305?\u287?\u305? g\f0\'fcvenli\f1\u287?i; String\rquote ler evet\par
3. form;\par
4. Performans;\par
StringBuilder no\par
String\rquote ler De\u287?i\'bamez\par
StringBuilder de\u287?i\'batirilebilir\par
String\rquote ler H\u305?zl\u305?\par
StringBuilder daha verimli, \f0\'f6zellikle setter ve getter methodlarinda.\par
\u8203?\par
\u8203?\par
S32: Constructor\rquote lar inherited edilebilir mi? \par
C32: Hay\f1\u305?r edilemez.\par
\u8203?\par
S33: ClassLoader nedir?\par
C33: JVM in altk\f0\'fcmesi ve class dosyalar\f1\u305?n\u305?n y\f0\'fcklenmesinden sorumlu yap\f1\u305?.\par
\u8203?\par
S34: Ka\f0\'e7 tane ClassLoader vard\f1\u305?r ve nelerdir? \par
C34: Java 3 tane ClassLoader destekler\par
1. Bootstrap\par
2. Extension\par
3. System / Application\par
\u8203?\par
\u8203?\par
\u8203?\par
S35: Java\rquote da String\rquote ler neden do\u287?as\u305? gere\u287?i de\u287?i\'bamezdir?\par
C35: Basit\f0\'e7e, String objesi olu\f1\'baturulduktan sonra durumunun de\u287?i\'batirilemeyece\u287?i anlam\u305?na gelir. Uygulaman\u305?n g\f0\'fcvenlik \'f6nbelle\f1\u287?ini, senkronizasyonunu ve performans\u305?n\u305? art\u305?r\u305?r.\par
\u8203?\par
\u8203?\par
S36: Array ve ArrayList aras\u305?ndaki farklar nelerdir? \par
C36:\par
1. Array, farkl\u305? veri t\f0\'fcrlerinin de\f1\u287?erlerini i\f0\'e7eremez.\par
ArrayList bunlar\f1\u305? i\f0\'e7erebilir.\par
2. Array size\rquote\f1\u305? tan\u305?mlanmal\u305?d\u305?r.\par
ArrayList size\rquote\u305? dinamik olarak de\u287?i\'batirilebilir.\par
3. Veri eklemek i\f0\'e7in Array\rquote in indeksi belirtmesi gerekir.\par
ArrayList buna ihtiyac\f1\u305? yok.\par
4. Array\rquote ler primitive data ve nesneler (Objects) i\f0\'e7erebilir.\par
ArrayList yaln\f1\u305?zca objeleri i\f0\'e7erebilir.\par
\u8203?\par
S37: Java da Map nedir?\par
C37: Map, benzersiz anahtarlar\f1\u305? (keys) de\u287?erlerle (values) e\'bale\'batiren bir Util Paketi ara y\f0\'fcz\'fcd\'fcr.\par
Yinelenen anahtarlar (key) i\'e7ermez\par
Her anahtar (key) en fazla bir de\f1\u287?erle(value) e\'balenebilir\par
\u8203?\par
\u8203?\par
S38: Java da Collection Class nedir?\par
C38: Collection bir mimar gibi bir grup nesne objeyi depolamak ve i\'balemek i\f0\'e7in hareket eden bir \'e7er\'e7eveden framework tan olu\f1\'baur.\par
\u8203?\par
S39: Collection Class\rquote lar neler i\f0\'e7erirler a\'e7\f1\u305?klay\u305?n\u305?z?\par
C39: Interface, class ve methodlar i\f0\'e7erirler. List, queue ve set en \'f6nemli par\'e7alar\f1\u305?d\u305?r Collection Class\rquote lar\u305?n.\par
\u8203?\par
S40: Polymorphism nedir?\par
C40: Bu soruya en iyi \f0\'f6rnek; kamera, hesap makinesi, mp3 \'e7alar yada uzaktan kumanda gibi kullan\f1\u305?lan bir cep telefonudur.\par
\u8203?\par
\u8203?\par
Q41: Ka\f0\'e7 \'e7e\f1\'bait Polymorphism vard\u305?r? \par
C41: 2 \f0\'e7e\f1\'baittir;\par
1- Compile time Polymorphism method overloading dir.\par
2- Run Time Polymorphism dir inheritance and interface taraf\u305?ndan yap\u305?l\u305?r.\par
\u8203?\par
\u8203?\par
\u8203?\par
S42: Java\rquote da Abstraction (soyutlama) nedir?\par
C42: Temelde ayr\u305?nt\u305?lar\u305? gizlemek ve \f0\'f6nemli olanlar\f1\u305? kullan\u305?c\u305?ya g\f0\'f6stermekle\par
ilgilenir. \f1\u304?ki yol olabilir soyutlama s\u305?n\u305?flar\u305? (Abstraction class) ve ara y\f0\'fczleri (Interface)\par
\u8203?\par
\u8203?\par
S43: Java da Interface ne anlam ifade eder?\par
C43: Abstraction method ve statik sabitlerin birle\f1\'baimidir. Herhangi bir Constructor\rquote a sahip de\u287?ildir. Bo\'ba g\f0\'f6vdeli birbiriyle alakal\f1\u305? methodlar dan olu\'baan bir gruptur.\par
\u8203?\par
\u8203?\par
\u8203?\par
S44: Abstract Class ile Interface aras\u305?ndaki farklar nelerdir? (Bu soru olmazsa olmazlardan)\par
A44: 1.\par
Abstract Class: Overridden yap\u305?lmas\u305?n\u305? sa\u287?layabilir.\par
Interface: sadece imzada yer al\u305?r, herhangi bir kod sa\u287?layamaz.\par
2. Abstract Class: bir class yaln\u305?zca bir soyut Abstraction class i geni\'baletebilir (extend edebilir)\par
Interface: bir class birka\f0\'e7 Interface uygulayabilir\par
3. Abstract Class: soyut olmayan method sahip olabilir\par
Interface: T\'fcm (ara y\'fcz) Interface methodlar (abstract tir) soyuttur\par
4. Abstract Class: \'f6rnek de\f1\u287?i\'bakeni (instance variable) olabilir\par
Interface: \f0\'f6rnek de\f1\u287?i\'bakenlere (instance variables) sahip olamaz\par
5. Abstract Class: herkes taraf\u305?ndan ula\'ba\u305?lan g\f0\'f6r\'fcn\'fcrl\'fc\f1\u287?e sahip olabilir public protected\par
private\par
Interface: sadece public olmal\u305? ya da olmamal\u305?\par
6. Abstract Class: Constructor i\f0\'e7erebilir\par
Interface: Constructor i\'e7eremez\par
7. Abstract Class: h\f1\u305?zl\u305?\par
Interface: yava\'ba , ger\f0\'e7ek class a uygun methodu bulmak i\'e7in ekstra zamana ihtiyaci var.\par
\u8203?\par
\u8203?\par
\u8203?\par
S45: Java da Inheritance (kal\f1\u305?t\u305?m-miras) nedir?\par
A45: Bu bir kavramd\u305?r ve kodun yeniden kullan\u305?lmas\u305?na yard\u305?mc\u305? olur. Farkl\u305? class lar aras\u305?nda bir ili\'baki kurar.\par
\u304?simleri ebeveyn class \u305? ve alt class \u305?d\u305?r.\par
\u8203?\par
S46: Java da alt class (child) nedir?\par
A46: \f0\'d6zellikleri miras alan bir class, alt class olarak tan\f1\u305?n\u305?r.\par
\u8203?\par
S47: Inheritance \f0\'e7e\f1\'baitleri nelerdir?\par
C47: tek (single), \f0\'e7ok d\'fczeyli(multilevel), hiyerar\f1\'baik (hierarchical) ve karma (hybrid) \par
\u8203?\par
S48: A\f0\'e7\f1\u305?klay\u305?n\u305?z?\par
C48: Single: Multilevel:\par
Hierarchical:\par
Hybrid:\par
Bir ebeveyn bir \f0\'e7ocuk\par
Daha fazla ebeveyn bir \'e7ocuk Bir ebeveyn daha fazla alt s\f1\u305?n\u305?f\par
\u304?ki veya daha fazla kal\u305?t\u305?m t\f0\'fcr\'fcn\'fcn bir kombinasyonudur.\par
\u8203?\par
\u8203?\par
S49: Java da method Overloading nedir?\par
C49: Methodun davran\f1\u305?\'ba\u305?na daha fazlas\u305?n\u305? eklemek veya geni\'baletmektir.\par
Bu bir derleme zaman\u305? (compile time) polimorfizmidir.\par
Methodlar\u305?n farkl\u305? imzalar\u305? olmal\u305?d\u305?r.\par
Ayn\u305? Class\rquote ta ki methodlar ayn\u305? ad\u305? payla\'ba\u305?r ancak her methodun farkl\u305? say\u305?da parametresi olmal\u305?d\u305?r. Veya farkl\u305? t\f0\'fcr ve s\f1\u305?raya sahip parametreler.\par
Class\rquote ta mirasa inheritance ihtiya\f0\'e7 duyabilir veya gerekmeyebilir.\par
\u8203?\par
\u8203?\par
S50: Java da method Overridden nedir?\par
A50: Methodun mevcut davran\f1\u305?\'ba\u305?n\u305? "de\u287?i\'batirmektir".\par
Bu bir \f0\'e7al\f1\u305?\'bama zaman\u305? polimorfizmidir.\par
Methods ayn\u305? imzaya sahip olmal\u305?d\u305?r.\par
Alt class, ayn\u305? ada sahip ayn\u305? methoda sahiptir.\par
Tam olarak ayn\u305? say\u305?da ve t\f0\'fcrde parametreler ve s\'fcper class olarak ayn\f1\u305? return type olmal\u305?d\u305?r.\par
\u8203?\par
\u8203?\par
\u8203?\par
\u8203?\par
S51: \f0\'d6zel ve st...\lang31\par
}
 